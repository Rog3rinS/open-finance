const { Account, Transaction } = require('../models');

class TransactionController {
  async store(req, res) {
    const { accountId } = req.params;
    const { type, amount } = req.body;

    try {
      const account = await Account.findByPk(accountId);
      if (!account) {
        return res.status(404).json({ message: "Conta não encontrada" });
      }

      if (amount <= 0) {
        return res.status(400).json({ message: "O valor da transação deve ser positivo." });
      }

      if (type === 'deposit') {
        account.balance = parseFloat(account.balance) + parseFloat(amount);
      } else if (type === 'withdraw') {
        if (parseFloat(account.balance) < parseFloat(amount)) {
          return res.status(400).json({ message: "Saldo insuficiente para saque." });
        }
        account.balance = parseFloat(account.balance) - parseFloat(amount);
      } else {
        return res.status(400).json({ message: "Tipo de transação inválido. Use 'deposit' ou 'withdraw'." });
      }

      await account.save();

      const transaction = await Transaction.create({
        account_id: accountId,
        type,
        amount: parseFloat(amount)
      });

      return res.status(201).json(transaction);
    } catch (error) {
      console.error("Erro ao realizar transação:", error);
      return res.status(500).json({ message: "Erro interno ao processar transação" });
    }
  }

  async index(req, res) {
    const { accountId } = req.params;

    try {
      const transactions = await Transaction.findAll({
        where: { account_id: accountId }
      });

      return res.status(200).json(transactions);
    } catch (error) {
      console.error("Erro ao buscar transações:", error);
      return res.status(500).json({ message: "Erro interno ao buscar transações" });
    }
  }
}

module.exports = new TransactionController();
